#!/usr/bin/env python3
"""
AI Terminal Assistant - System Command
Usage: ai [options] "natural language request"
Author: surajraktate
"""

import sys
import os
import argparse
from pathlib import Path

# Add the library path
sys.path.insert(0, '/usr/lib/ai-terminal-assistant')

try:
    from ai_assistant import AITerminalAssistant
    from config import ConfigManager
except ImportError as e:
    print(f"Error: Failed to import AI Terminal Assistant modules: {e}")
    print("Please reinstall the package: sudo apt reinstall ai-terminal-assistant")
    sys.exit(1)

def main():
    """Main entry point for the ai command"""
    parser = argparse.ArgumentParser(
        description="AI-Powered Terminal Assistant",
        epilog="Examples:\n"
               "  ai 'find files containing error'\n"
               "  ai 'show processes using most CPU'\n"
               "  ai --config\n"
               "  ai --help",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument(
        "request",
        nargs="*",
        help="Natural language request for command generation"
    )

    parser.add_argument(
        "--config",
        action="store_true",
        help="Configure API key and settings"
    )

    parser.add_argument(
        "--explain", "-e",
        action="store_true",
        help="Include detailed explanation with command"
    )

    parser.add_argument(
        "--interactive", "-i",
        action="store_true",
        help="Start interactive mode"
    )

    parser.add_argument(
        "--version", "-v",
        action="version",
        version="AI Terminal Assistant 1.0.0"
    )

    parser.add_argument(
        "--reset-config",
        action="store_true",
        help="Reset configuration to defaults"
    )

    args = parser.parse_args()

    # Handle configuration
    if args.config or args.reset_config:
        config_manager = ConfigManager()
        if args.reset_config:
            config_manager.reset_config()
            print("✅ Configuration reset to defaults")
        else:
            config_manager.setup_config()
        return

    # Validate configuration exists
    config_manager = ConfigManager()
    if not config_manager.is_configured():
        print("❌ AI Terminal Assistant is not configured.")
        print("Please run: ai --config")
        sys.exit(1)

    # Create assistant instance
    try:
        assistant = AITerminalAssistant()
    except Exception as e:
        print(f"❌ Error initializing assistant: {e}")
        print("Please check your configuration: ai --config")
        sys.exit(1)

    # Handle different modes
    if args.interactive or (not args.request and not args.config):
        assistant.run_interactive()
    elif args.request:
        user_request = " ".join(args.request)
        assistant.process_request(user_request, explain=args.explain)
    else:
        parser.print_help()

if __name__ == "__main__":
    main()